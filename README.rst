autofilter
==========

Automatically mitigate layer 7 DDoS attacks.

Installation
------------

 - ``cd /opt``
 - ``git clone https://github.com/makhomed/autofilter.git autofilter``

Also you need to install unbound and dnspython:

.. code-block:: none

    # yum install unbound
    # systemctl enable unbound
    # systemctl start unbound
        interface: 127.0.0.1
        do-ip6: no

    # pip install dnspython

Upgrade
-------

 - ``cd /opt/autofilter``
 - ``git pull``

Configuration
-------------

  - ``vim /opt/autofilter/autofilter.conf``
  - write to config something like this:

.. code-block:: none

    limit UA none
    limit RU 3000
    limit PL 3000

Configuration file allow comments, from symbol ``#`` to end of line.

Configuration file has only two directives: ``limit`` and ``block``.

``limit`` directive has syntax: ``limit <entity> <threshold>``.

``<entity>`` can be ``ALL``, or country code, for example, ``UA`` or ``RU`` or ``CN``.
Also ``<entity>`` can be IP address, ipv4 or ipv6.

``<threshold>`` is load threshold after which specific ip address will be blocked.
``<threshold>`` is integer number or special value ``none``.

Load measured as one-minute sum of load weight generated by each request from each ip.
For example, one request to static resource or to redirect page measured as weight 1,
one POST request has weight 30, one request to resource with args has weight 20,
and one other request has weight 10.

If some specific ip generates load above ``<threshold>`` - this ip will be blocked as bot.

Search engine bots from Google, Yandex and Bing are detected automatically and will be never blocked:

.. code-block:: python

    def is_whitelisted_search_engine(self, domain):
        # https://support.google.com/webmasters/answer/80553?hl=en
        if domain.endswith(".googlebot.com.") or domain.endswith(".google.com."):
            return True
        # https://yandex.com/support/webmaster/robot-workings/check-yandex-robots.xml
        elif domain.endswith(".yandex.com.") or domain.endswith(".yandex.net.") or domain.endswith(".yandex.ru."):
            return True
        # https://www.bing.com/webmaster/help/how-to-verify-bingbot-3905dc26
        elif domain.endswith(".search.msn.com."):
            return True
        else:
            return False

By default ``limit ALL 600`` if other value not specified in config.

``block`` directive has syntax: ``block <entity> <time>``.

``<entity>`` can be ``ALL``, or country code, for example, ``UA`` or ``RU`` or ``CN``.
Also ``<entity>`` can be IP address, ipv4 or ipv6.

``<time>`` is block time of block in hours or in days, suffix ``h`` or ``d`` is required.
For example, ``24h`` or ``3d``.

By default ``block ALL 24h`` if other value not specified in config.

nginx configuration
~~~~~~~~~~~~~~~~~~~

nginx configuration in context http:

.. code-block:: none

    $bot {
        default 0;
        include /opt/autofilter/var/bot.conf;
    }

    map $bot $loggable {
        0 1;
        1 0;
    }

    log_format frontend '$time_iso8601\t$http_cf_ipcountry\t$remote_addr\t$scheme\t$host\t$request_method\t'
                      '"$request_uri"\t$status\t$body_bytes_sent\t"$http_referer"\t"$http_user_agent"\t$http_cf_ray';

    access_log /var/log/nginx/access.log frontend if=$loggable;

nginx configuration in context server:

.. code-block:: none

    if ( $bot ) { return 403; }

Command-line usage
------------------

``autofilter`` can be started in differend modes: ``daemon``, ``top``, ``ext``, ``errors``.

``daemon`` mode intended for using ``autofilter`` as systemd service, in this mode ``autofilter``
continuously monitor nginx access.log file and automatically block detected bots.

``top`` mode display top load generated from users by ip address, and display which ip will be blocked in ``daemon`` mode.

``ext`` mode display all unknown non-static extensions occurred in access.log file.

``errors`` mode display all ``5xx`` errors occurred in access.log file.


Automation via systemd service
------------------------------

Create configuration file ``/opt/autofilter/autofilter.conf`` and define limits.
After it create systemd service, for example, in file ``/etc/systemd/system/autofilter.service``:

.. code-block:: none

    [Unit]
    Description=autofilter
    After=unbound.service

    [Service]
    ExecStart=/opt/autofilter/autofilter daemon
    Restart=always

    [Install]
    WantedBy=multi-user.target
    After this you need to start service:

  - ``systemctl daemon-reload``
  - ``systemctl enable autofilter``
  - ``systemctl start autofilter``
  - ``systemctl status autofilter``

If all ok you will see what service is enabled and running.

